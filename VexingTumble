////// Error checking user for not having the token selected, an active combat, that the token they are targeting or selecting is in combat or not/////
if (canvas.tokens.controlled == 0) {
    ui.notifications.warn("No token currently active.");
    return
}

// new selection code as seen in Blackmarrows for selecting a token or target
var t = "";
if (game.user.targets.size == 0) {
    ui.notifications.warn("No target selected.");
    return
}
//////////////////////////////////////////////////////////////////////////////////////////////////



const action = {
    name: "Vexing Tumble",
    skill: "Acrobatics",
    targetDC: "Reflex",
    
    description:
        "You tumble around your foes, expertly avoiding their reactions. Stride up to half your Speed and roll an Acrobatics check. Compare the result to the Reflex DC of each foe whose reach you began in or enter during the movement, in sequence.",
    
    degreesOfSuccess: {
        criticalSuccess: "This movement doesn't trigger reactions from the foe, the foe is flat-footed to you until the end of your turn. You have gained Panache.",
        success: "This movement doesn't trigger reactions from the foe. You have gained Panache.",
        failure: "This movement triggers reactions from foes as normal, no other effect",
        criticalFailure: "Your movement immediately stops when you enter the creature's reach; if you began in the creature's reach, you don't move.",
    },
};


(async () => {
    const skillRoll = () => {
        const skillKey = Object.keys(actor.data.data.skills).find(
            (key) => actor.data.data.skills[key].name === action.skill.toLowerCase()
        );

        const options = actor.getRollOptions([
            "all",
            "skill-check",
            action.skill.toLowerCase(),
        ]);

        options.push(action.name.toLowerCase());

        actor.data.data.skills[skillKey].roll(event, options, (roll) => {
            let resultMessage = `<hr /><h2>${action.name}</h2>`;

            for (const target of game.user.targets) {
                const dc =
                    target.actor?.data?.data?.saves?.[
                        action.targetDC.toLowerCase()
                    ]?.value + 10;
                if (dc) {
                    resultMessage += `<hr /><h3><b>vs ${target.name}</h3></b> (DC:${dc})`;
                   
                        let successStep =
                            roll.total >= dc
                                ? roll.total >= dc + 10
                                    ? 3
                                    : 2
                                : roll.total > dc - 10
                                ? 1
                                : 0;
                        switch (roll.terms[0].results[0].result) {
                            case 20:
                                successStep++;
                                break;
                            case 1:
                                successStep--;
                                break;
                        }
                        if (successStep >= 3) {
                            resultMessage += `<hr />üí• <b>Critical Success</b>`;
                            if (action.degreesOfSuccess?.criticalSuccess) {
                                resultMessage += `<br />${action.degreesOfSuccess.criticalSuccess}`;
                            }
                        } else if (successStep === 2) {
                            resultMessage += `<hr />‚úîÔ∏è <b>Success</b>`;
                            if (action.degreesOfSuccess?.success) {
                                resultMessage += `<br />${action.degreesOfSuccess.success}`;
                            }
                        } else if (successStep === 1) {
                            resultMessage += `<hr />‚ùå <b>Failure</b>`;
                            if (action.degreesOfSuccess?.failure) {
                                resultMessage += `<br />${action.degreesOfSuccess.failure}`;
                            }
                        } else if (successStep <= 0) {
                            resultMessage += `<hr />üíî <b>Critical Failure</b>`;
                            if (action.degreesOfSuccess?.criticalFailure) {
                                resultMessage += `<br />${action.degreesOfSuccess.criticalFailure}`;
                            }
                        }
                    
                }
            }

            ChatMessage.create({
                user: game.user._id,
                speaker: ChatMessage.getSpeaker(),
                content: resultMessage,
            });

        });

    };

    skillRoll();
       
})();
